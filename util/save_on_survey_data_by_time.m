function save_on_survey_data_by_time(simDir, timesteps)
    if not(isfolder(simDir))
        error("Folder: " + simDir + ", does not exists!\n" );
    end
    sim_filename = @(i) sprintf('timestep_%05d.mat', i);
    varNames = [
        "timesteps",...
        "width",...
        "pressure",...
        "rho",...
        "viscosity",...
        "T",...
        "TL",...
        "TS",...
        "Teff",...
        "dTundercooling",...
        "alpha",...
        "beta",...
        "betaeq",...
        "xFront",...
        "vFront",...
        "time",...
        "maxWidthX",...
        "U",...
        "I"
    ];
    varTypes = {
        'double',...
        'double',...
        'double',...
        'double',...
        'double',...
        'double',...
        'double',...
        'double',...
        'double',...
        'double',...
        'double',...
        'double',...
        'double',...
        'double',...
        'double',...
        'double',...
        'double',...
        'double',...
        'double'
    };
    T = table('Size',[length(timesteps), 19], 'VariableTypes',varTypes, 'VariableNames',varNames);
    iter = 1;
    for i = timesteps
        filepath = fullfile(simDir, sim_filename(i));
        load(filepath, 'FractureData');
        element = FractureData.survey(end);
        if i == 0
            U = 0.0;
            I = 0.0;
        else
            U = FractureData.crystallization.U(element);
            I = FractureData.crystallization.I(element);
        end
        T(iter, :) = {
            i,...
            FractureData.width(element),...
            FractureData.pressure(element),...
            FractureData.rho(element),...
            FractureData.mu(element),...
            FractureData.temperature(element),...
            FractureData.TL(element),...
            FractureData.TS(element),...
            FractureData.crystallization.Teff(element),...
            FractureData.crystallization.dT(element),...
            FractureData.alpha(element),...
            FractureData.beta(element),...
            FractureData.betaeq(element),...
            FractureData.front(end),...
            FractureData.front_velocity(end),...
            FractureData.time,...
            FractureData.mesh.xc(element),...
            U,...
            I
        };
        iter = iter + 1;
    end
    filepath = fullfile(simDir, 'crystallizationSurvey.csv');
    writetable(T,filepath,'Delimiter',';');
end